# Define the ASCII art banner
$banner = @"
 ██████╗ █████╗ ██████╗ ██╗ ██████╗██╗     ██╗   ██╗███████╗
██╔════╝██╔══██╗██╔══██╗██║██╔════╝██║     ██║   ██║██╔════╝
██║     ███████║██║  ██║██║██║     ██║     ██║   ██║███████╗
██║     ██╔══██║██║  ██║██║██║     ██║     ██║   ██║╚════██║
╚██████╗██║  ██║██████╔╝██║╚██████╗███████╗╚██████╔╝███████║
 ╚═════╝╚═╝  ╚═╝╚═════╝ ╚═╝ ╚═════╝╚══════╝ ╚═════╝ ╚══════╝

                             Version 1.2
                             Created by: TJ Null
                             Updated by : Taylor Christian Newsome
"@

# Print the ASCII banner
Write-Host $banner

# Function to log output to a file and display it on the console
function Log-Output {
    param (
        [string]$Message,
        [string]$LogFile = "script_log.txt"
    )
    Add-Content -Path $LogFile -Value $Message
    Write-Output $Message
}

# Function to show help
function Show-Help {
    Log-Output -Message @"
Usage: .\cadiclus.ps1 <command>
Available Commands:
    Get-OSInfo                     - Retrieves OS information and kernel version.
    Check-ADJoinStatus             - Checks if the system is joined to an Active Directory domain.
    Get-Drives                     - Lists local and network drives.
    Get-NetworkActivity            - Displays current network connections and routing information.
    Get-LoggedInUsers              - Lists currently logged-in users.
    Check-AVInstalled              - Checks if antivirus software is installed.
    Check-CredentialManagerInstalled - Checks if credential management tools are installed.
    Search-PS1Files                - Searches for .ps1 files.
    Search-AWSCredentials          - Searches for AWS credentials.
    Search-AzureCredentials        - Searches for Azure credentials.
    Review-UserHistory             - Reviews user shell and PowerShell history.
    Show-Help                      - Displays this help message.
"@
}

# Function to retrieve OS information and kernel version
function Get-OSInfo {
    try {
        Log-Output -Message "Retrieving OS information and kernel version..."
        $osInfo = Get-CimInstance -ClassName Win32_OperatingSystem
        $kernelVersion = [System.Environment]::OSVersion.Version
        
        Log-Output -Message "`n[+] OS Information:"
        Log-Output -Message "Name: $($osInfo.Caption)"
        Log-Output -Message "Version: $($osInfo.Version)"
        Log-Output -Message "Kernel Version: $kernelVersion"
    } catch {
        Log-Output -Message "Error retrieving OS information: $_"
    }
}

# Function to check if the system is joined to an Active Directory domain
function Check-ADJoinStatus {
    try {
        Log-Output -Message "Checking if the system is joined to an Active Directory domain..."
        $adStatus = (Get-WmiObject -Class Win32_ComputerSystem).PartOfDomain
        $statusMessage = if ($adStatus) { "The system is part of a domain." } else { "The system is not part of a domain." }
        Log-Output -Message "`n[+] $statusMessage"
    } catch {
        Log-Output -Message "Error checking Active Directory join status: $_"
    }
}

# Function to list local and network drives
function Get-Drives {
    try {
        Log-Output -Message "Listing local and network drives..."
        $drives = Get-PSDrive -PSProvider FileSystem
        if ($drives) {
            Log-Output -Message "`n[+] Drives:"
            $drives | ForEach-Object {
                Log-Output -Message "Name: $($_.Name) Path: $($_.Root) Free: $([math]::Round($_.Used/1GB, 2))GB Total: $([math]::Round($_.Used/1GB, 2))GB"
            }
        } else {
            Log-Output -Message "`n[-] No drives found."
        }
    } catch {
        Log-Output -Message "Error listing drives: $_"
    }
}

# Function to display current network connections and routing information
function Get-NetworkActivity {
    try {
        Log-Output -Message "Displaying current network connections and routing information..."
        $netstatOutput = netstat -an | Out-String
        $routeOutput = route print | Out-String

        Log-Output -Message "`n[+] Network Connections:"
        Log-Output -Message $netstatOutput
        Log-Output -Message "`n[+] Routing Information:"
        Log-Output -Message $routeOutput
    } catch {
        Log-Output -Message "Error displaying network activity: $_"
    }
}

# Function to list currently logged-in users
function Get-LoggedInUsers {
    try {
        Log-Output -Message "Listing currently logged-in users..."
        $loggedInUsers = quser | Out-String
        Log-Output -Message "`n[+] Logged-in Users:"
        Log-Output -Message $loggedInUsers
    } catch {
        Log-Output -Message "Error listing logged-in users: $_"
    }
}

# Function to check if antivirus software is installed
function Check-AVInstalled {
    try {
        Log-Output -Message "Checking if antivirus software is installed..."
        $avSoftware = Get-WmiObject -Namespace "root\SecurityCenter2" -Class "AntivirusProduct"
        if ($avSoftware) {
            Log-Output -Message "`n[+] Antivirus software installed:"
            $avSoftware | ForEach-Object { Log-Output -Message $_.displayName }
        } else {
            Log-Output -Message "`n[-] No antivirus software found."
        }
    } catch {
        Log-Output -Message "Error checking antivirus software: $_"
    }
}

# Function to check if credential management tools are installed
function Check-CredentialManagerInstalled {
    try {
        Log-Output -Message "Checking if credential management tools are installed..."
        $credentialManager = Get-Command -Name vaultcmd -ErrorAction SilentlyContinue
        if ($credentialManager) {
            Log-Output -Message "`n[+] Credential management tools installed."
        } else {
            Log-Output -Message "`n[-] No credential management tools found."
        }
    } catch {
        Log-Output -Message "Error checking credential management tools: $_"
    }
}

# Function to search for .ps1 files
function Search-PS1Files {
    try {
        Log-Output -Message "Searching for .ps1 files in the home directory..."
        $ps1Files = Get-ChildItem -Path $HOME -Filter *.ps1 -Recurse -ErrorAction SilentlyContinue
        if ($ps1Files) {
            $totalFiles = $ps1Files.Count
            # Display progress bar
            for ($i = 0; $i -lt $totalFiles; $i++) {
                $file = $ps1Files[$i]
                $percentage = [math]::Round(($i / $totalFiles) * 100)
                Write-Progress -Activity "Searching for .ps1 files..." -Status "Progress: $percentage%" -PercentComplete $percentage
                Log-Output -Message $file.FullName
            }
        } else {
            Log-Output -Message "`n[-] No .ps1 files found."
        }
    } catch {
        Log-Output -Message "Error searching for .ps1 files: $_"
    }
}

# Function to search for AWS credentials
function Search-AWSCredentials {
    try {
        Log-Output -Message "Searching for AWS credentials in the home directory..."
        $awsCredentials = Get-ChildItem -Path $HOME/.aws -Filter credentials -Recurse -ErrorAction SilentlyContinue
        if ($awsCredentials) {
            $totalFiles = $awsCredentials.Count
            # Display progress bar
            for ($i = 0; $i -lt $totalFiles; $i++) {
                $file = $awsCredentials[$i]
                $percentage = [math]::Round(($i / $totalFiles) * 100)
                Write-Progress -Activity "Searching for AWS credentials..." -Status "Progress: $percentage%" -PercentComplete $percentage
                Log-Output -Message $file.FullName
            }
        } else {
            Log-Output -Message "`n[-] No AWS credentials files found."
        }
    } catch {
        Log-Output -Message "Error searching for AWS credentials: $_"
    }
}

# Function to search for Azure credentials
function Search-AzureCredentials {
    try {
        Log-Output -Message "Searching for Azure credentials in the home directory..."
        $azureCredentials = Get-ChildItem -Path $HOME/.azure -Filter *.json -Recurse -ErrorAction SilentlyContinue
        if ($azureCredentials) {
            $totalFiles = $azureCredentials.Count
            # Display progress bar
            for ($i = 0; $i -lt $totalFiles; $i++) {
                $file = $azureCredentials[$i]
                $percentage = [math]::Round(($i / $totalFiles) * 100)
                Write-Progress -Activity "Searching for Azure credentials..." -Status "Progress: $percentage%" -PercentComplete $percentage
                Log-Output -Message $file.FullName
            }
        } else {
            Log-Output -Message "`n[-] No Azure credentials files found."
        }
    } catch {
        Log-Output -Message "Error searching for Azure credentials: $_"
    }
}

# Function to review user shell and PowerShell history
function Review-UserHistory {
    try {
        Log-Output -Message "Reviewing user shell and PowerShell history..."
        $userShellHistory = Get-Content -Path $HOME/.bash_history -ErrorAction SilentlyContinue
        $userPowerShellHistory = Get-Content -Path $HOME/.config/powershell/PSReadLine/ConsoleHost_history.txt -ErrorAction SilentlyContinue

        if ($userShellHistory) {
            Log-Output -Message "`n[+] User Shell History:"
            $userShellHistory | ForEach-Object { Log-Output -Message $_ }
        } else {
            Log-Output -Message "`n[-] No shell history found."
        }

        if ($userPowerShellHistory) {
            Log-Output -Message "`n[+] User PowerShell History:"
            $userPowerShellHistory | ForEach-Object { Log-Output -Message $_ }
        } else {
            Log-Output -Message "`n[-] No PowerShell history found."
        }
    } catch {
        Log-Output -Message "Error reviewing user history: $_"
    }
}

# Main script execution
function Main {
    param (
        [string]$Command
    )

    Show-Help

    switch ($Command) {
        "Get-OSInfo" { Get-OSInfo }
        "Check-ADJoinStatus" { Check-ADJoinStatus }
        "Get-Drives" { Get-Drives }
        "Get-NetworkActivity" { Get-NetworkActivity }
        "Get-LoggedInUsers" { Get-LoggedInUsers }
        "Check-AVInstalled" { Check-AVInstalled }
        "Check-CredentialManagerInstalled" { Check-CredentialManagerInstalled }
        "Search-PS1Files" { Search-PS1Files }
        "Search-AWSCredentials" { Search-AWSCredentials }
        "Search-AzureCredentials" { Search-AzureCredentials }
        "Review-UserHistory" { Review-UserHistory }
        "Show-Help" { Show-Help }
        default {
            Log-Output -Message "Invalid command. Use 'Show-Help' for a list of available commands."
        }
    }
}

# Execute the script
Main -Command $args[0]
